
--deleting all tables before each start

drop table IF EXISTS mpa CASCADE;
drop table IF EXISTS film CASCADE;
drop table IF EXISTS genre CASCADE;
drop table IF EXISTS film_genre CASCADE;
drop table IF EXISTS users CASCADE;
drop table IF EXISTS likes CASCADE;
drop table IF EXISTS friends CASCADE;
drop table IF EXISTS feed CASCADE;
drop table IF EXISTS reviews CASCADE;
drop table IF EXISTS user_review CASCADE;
drop table IF EXISTS film_review CASCADE;
drop table IF EXISTS reviews_likes CASCADE;
drop table IF EXISTS review_likes CASCADE;
drop table IF EXISTS director CASCADE;
drop table IF EXISTS film_director CASCADE;


-- creating a film and film related tables

create TABLE IF NOT EXISTS mpa (
    rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name      VARCHAR(5) NOT NULL
);

create TABLE IF NOT EXISTS film
(
    film_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR(50) NOT NULL,
    release_date DATE NOT NULL,
    duration     INTEGER NOT NULL,
    description  VARCHAR NOT NULL,
    mpa          INTEGER REFERENCES mpa (rating_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS genre
(
    genre_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name       VARCHAR(20) NOT NULL,
    CONSTRAINT genre_name_unique_constraint UNIQUE (name)
);


create TABLE IF NOT EXISTS film_genre
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id  INTEGER NOT NULL REFERENCES film (film_id) ON delete CASCADE,
    genre_id INTEGER NOT NULL REFERENCES genre (genre_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS director
(
	director_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name        VARCHAR(50) NOT NULL,
	CONSTRAINT  director_name_unique_cinstrant UNIQUE (name)
);

create TABLE IF NOT EXISTS film_director
(
	id 			INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	film_id 	INTEGER NOT NULL REFERENCES film (film_id) ON delete CASCADE,
	director_id INTEGER NOT NULL REFERENCES director (director_id) ON delete CASCADE
);

-- creating a user and user related tables

create TABLE IF NOT EXISTS users
(
    user_id    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login      VARCHAR(50) NOT NULL,
    birthday   DATE NOT NULL,
    email      VARCHAR(50) NOT NULL,
    name       VARCHAR(50) NOT NULL,
    CONSTRAINT users_login_unique_constraint UNIQUE (login),
    CONSTRAINT users_email_unique_constraint UNIQUE (email)
);

create TABLE IF NOT EXISTS likes
(
    film_id INTEGER NOT NULL REFERENCES film (film_id) ON delete CASCADE,
    user_id INTEGER NOT NULL REFERENCES users (user_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS friends
(
    id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status 	  BOOLEAN DEFAULT FALSE NOT NULL,
    user_id   INTEGER NOT NULL REFERENCES users (user_id) ON delete CASCADE,
    friend_id INTEGER NOT NULL REFERENCES users (user_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS feed
(
    event_id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id         INTEGER NOT NULL REFERENCES users (user_id) ON delete CASCADE,
    entity_id       INTEGER NOT NULL,
    event_type      VARCHAR(6) NOT NULL,
    operation       VARCHAR(6) NOT NULL,
    event_timestamp BIGINT NOT NULL
);

-- creating a review and review related tables

create TABLE IF NOT EXISTS reviews (
    review_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     VARCHAR,
    is_positive BOOLEAN NOT NULL,
    user_id     INTEGER NOT NULL REFERENCES users (user_id) ON delete CASCADE,
    film_id     INTEGER NOT NULL REFERENCES film (film_id) ON delete CASCADE,
    useful      INTEGER NOT NULL
);

create TABLE IF NOT EXISTS user_review (
    id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id   INTEGER REFERENCES users (user_id) ON delete CASCADE,
    review_id INTEGER REFERENCES reviews (review_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS film_review (
    id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id   INTEGER REFERENCES film (film_id) ON delete CASCADE,
    review_id INTEGER REFERENCES reviews (review_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS reviews_likes (
    id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    review_id INTEGER REFERENCES reviews (review_id) ON delete CASCADE,
    user_id   INTEGER REFERENCES users (user_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS reviews_dislikes (
    id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    review_id INTEGER REFERENCES reviews (review_id) ON delete CASCADE,
    user_id   INTEGER REFERENCES users (user_id) ON delete CASCADE
);
